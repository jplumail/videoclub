# This file was auto-generated by the Firebase CLI
# https://github.com/firebase/firebase-tools

name: Deploy to Firebase Hosting on merge
on:
  push:
    branches:
      - main
permissions:
  contents: read
  id-token: write
jobs:
  build_and_deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - id: auth
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: projects/957184131556/locations/global/workloadIdentityPools/github/providers/videoclub
          service_account: cloudbuild-web@videoclub-447210.iam.gserviceaccount.com

      - uses: google-github-actions/setup-gcloud@v3
        with:
          project_id: videoclub-447210

      - name: Submit Extractor Cloud Build
        run: |
          set -euo pipefail
          gcloud builds submit extractor \
            --config=extractor/cloudbuild.yaml \
            --project=videoclub-447210 \
            --region=europe-west9

      - name: Trigger Cloud Build
        id: trigger
        env:
          DEPLOY_BRANCH: ${{ github.ref_name }}
        run: |
          set -euo pipefail
          BUILD_ID=$(gcloud builds triggers run videoclub-web-rebuild \
            --project=videoclub-447210 \
            --region=europe-west9 \
            --branch="${DEPLOY_BRANCH}" \
            --format='value(metadata.build.id)')
          if [ -z "$BUILD_ID" ]; then
            echo "Failed to start Cloud Build run" >&2
            exit 1
          fi
          echo "build_id=$BUILD_ID" >> "$GITHUB_OUTPUT"

      - name: Wait For Cloud Build
        if: steps.trigger.outputs.build_id != ''
        env:
          BUILD_ID: ${{ steps.trigger.outputs.build_id }}
          PROJECT_ID: videoclub-447210
          REGION: europe-west9
        run: |
          set -euo pipefail
          poll_interval=15
          max_attempts=160
          attempt=0
          while [ "$attempt" -lt "$max_attempts" ]; do
            STATUS=$(gcloud builds describe "${BUILD_ID}" \
              --project="${PROJECT_ID}" \
              --region="${REGION}" \
              --format='value(status)')
            if [ "${STATUS}" = "SUCCESS" ]; then
              echo "Cloud Build ${BUILD_ID} finished successfully."
              exit 0
            fi
            if [ "${STATUS}" = "QUEUED" ] || [ "${STATUS}" = "WORKING" ]; then
              attempt=$((attempt + 1))
              echo "Cloud Build status is ${STATUS}. Waiting (${attempt}/${max_attempts})..."
              sleep "${poll_interval}"
              continue
            fi
            echo "Cloud Build ${BUILD_ID} finished with status: ${STATUS}" >&2
            echo "Fetching Cloud Build logs for context..."
            gcloud builds log "${BUILD_ID}" \
              --project="${PROJECT_ID}" \
              --region="${REGION}" || true
            exit 1
          done
          echo "Cloud Build ${BUILD_ID} did not finish within $((poll_interval * max_attempts)) seconds." >&2
          exit 1
